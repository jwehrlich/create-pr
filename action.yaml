name: "Ensure Interval Commit"
description: "If no commit has occured since specified date, then create empty commit"

inputs:
  interval_limit:
    type: integer
    required: true
    description: 'Max time since last commit in seconds (default 1 week)'
    default: 0
  branch:
    type: string
    required: false
    description: 'Commit branch (defaults to HEAD)'
    default: ''
  branch_base:
    type: string
    required: true
    description: 'Commit branch (defaults to HEAD)'
    default: ''
  name:
    type: string
    required: false
    description: 'Author Name'
  email:
    type: string
    required: false
    description: 'Author Email'
  message:
    type: string
    required: true
    description: 'Github Commit Message'
    default: 'Empty Commit'

runs:
  using: 'composite'
  steps:

    - name: Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: "${{ inputes.submodules }}"
        fetch-depth: '0'

    - name: Process Last Commit
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      run: |
        git_name="${{ inputs.name }}"
        git_name=${git_name:-"github-actions[bot]"}
        git config user.name "${git_name}"

        email_input="${{ inputs.email }}"
        email_input=${email_input:-"${{ vars.APP_ID }}+github-actions[bot]@users.noreply.github.com"}
        git config user.email "${email_input}"

        default_branch="${{ inputs.branch }}"
        if [ -z "${default_branch}" ]; then
          default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
        fi

        git fetch --all
        git switch ${default_branch}

        time_now_epoch=$(date +%s)
        last_commit_epoch=$(git log -1 --date=raw | grep ^Date | tr -s ' ' | cut -d ' ' -f2)
        seconds_since=$((time_now_epoch - last_commit_epoch))

        max_seconds=${{ inputs.interval_limit }}
        if ((seconds_since > max_seconds)); then
          git checkout -b "${{ inputs.branch_base }}-$(git rev-parse --short HEAD)"

          git commit --allow-empty -m "${{ inputs.message }}"
          git push --set-upstream origin $(git branch --show-current)

          gh pr create -B master -H $(git branch --show-current) --title 'Merge branch_to_merge into base_branch' --body 'Created by Github action'
        else
          echo "Time since last commit is less than desired interval. No need to create a new commit."
        fi
